{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploy an EC2 instance with CloudWatch Monitoring scripts which allow you to gather memory and disk metrics",
  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "Can contain only ASCII characters."
    },
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large","m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "CloudWatchTimeInterval" : {
      "Description" : "The interval in minutes you want this instance to wait to put metrics into CloudWatch",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "59",
      "Default": "1"
    },
    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x"
    }
  },  
  "Mappings": {
    "SubnetConfig": {
      "VPC": {
        "CIDR": "10.0.0.0/16"
      },
      "InstanceSubnet1": {
        "CIDR": "10.0.0.0/24"
      }
    },
    "AWSInstanceType2Arch" : {
      "t2.nano"     : { "Arch" : "HVM64"  },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "t2.large"    : { "Arch" : "HVM64"  },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.large"    : { "Arch" : "HVM64"  },
      "m4.xlarge"   : { "Arch" : "HVM64"  },
      "m4.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.4xlarge"  : { "Arch" : "HVM64"  },
      "m4.10xlarge" : { "Arch" : "HVM64"  },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "c4.large"    : { "Arch" : "HVM64"  },
      "c4.xlarge"   : { "Arch" : "HVM64"  },
      "c4.2xlarge"  : { "Arch" : "HVM64"  },
      "c4.4xlarge"  : { "Arch" : "HVM64"  },
      "c4.8xlarge"  : { "Arch" : "HVM64"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "d2.xlarge"   : { "Arch" : "HVM64"  },
      "d2.2xlarge"  : { "Arch" : "HVM64"  },
      "d2.4xlarge"  : { "Arch" : "HVM64"  },
      "d2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    },    
    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"HVM64" : "ami-40d28157"},
      "us-west-2"        : {"HVM64" : "ami-a9d276c9"},
      "us-west-1"        : {"HVM64" : "ami-6e165d0e"},
      "eu-west-1"        : {"HVM64" : "ami-0d77397e"},
      "eu-central-1"     : {"HVM64" : "ami-8504fdea"},
      "ap-northeast-1"   : {"HVM64" : "ami-0567c164"},
      "ap-northeast-2"   : {"HVM64" : "ami-8fed39e1"},
      "ap-southeast-1"   : {"HVM64" : "ami-a1288ec2"},
      "ap-southeast-2"   : {"HVM64" : "ami-4d3b062e"},
      "ap-south-1"       : {"HVM64" : "ami-0355216c"},
      "us-east-2"        : {"HVM64" : "ami-153e6470"},
      "sa-east-1"        : {"HVM64" : "ami-e93da085"}
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "VPC",
            "CIDR"
          ]
        },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "CW : Custom Scripts"
          }
        ]
      }
    },
    "InstanceSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "InstanceSubnet1",
            "CIDR"
          ]
        },
        "AvailabilityZone" : {
          "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "CW : Custom Scripts :: Public Subnet 1"
          }
        ]
      }
    },    
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "CW : Custom Scripts"
          }
        ]
      }
    },
    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "CW : Custom Scripts"
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "InstanceSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "InstanceSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Web-tier Security Group with HTTP access on port 8080 from the ELB",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp" : { "Ref" : "SSHLocation"}
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "CustomMetricsPolicy": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description": "cwcustommetrics_policy",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:PutMetricData",
                "cloudwatch:GetMetricStatistics",
                "cloudwatch:ListMetrics",
                "ec2:DescribeTags"
              ],
              "Resource": [
                {
                  "Fn::Sub" : "*"
                }
              ]
            }
          ]
        }
      }
    },
    "BasicRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "ManagedPolicyArns": [{ "Ref": "CustomMetricsPolicy" }]
      },
      "DependsOn": ["CustomMetricsPolicy"]
    },
    "BasicInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "BasicRole"
        } ]
      },
      "DependsOn": ["BasicRole"]
    },
    "Instance": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "Comment" : "Install cloudwatch monitoring scripts",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
                "unzip" : [],
                "libwww-perl": [],
                "libdatetime-perl": []
              }
            },
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/usr/local/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource Instance ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            },
            "commands": {
              "update_config_files": {
                "command" : {
                  "Fn::Join" : ["; ", [
                    "cd /home/ubuntu",
                    "mkdir downloads",
                    "cd downloads",
                    "curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip -O",
                    "unzip CloudWatchMonitoringScripts-1.2.1.zip",
                    "rm CloudWatchMonitoringScripts-1.2.1.zip",
                    "cd aws-scripts-mon",
                    {"Fn::Sub": "echo \"*/${CloudWatchTimeInterval} * * * * /home/ubuntu/downloads/aws-scripts-mon/mon-put-instance-data.pl --mem-util --disk-space-util --disk-path=/ --from-cron\" | crontab -"}
                  ]]
                },
                "ignoreErrors" : "false"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroupIds" : [ { "Ref": "InstanceSecurityGroup" }],
        "SubnetId" : { "Ref" : "InstanceSubnet1" },
        "KeyName"        : { "Ref" : "KeyName" },
        "IamInstanceProfile": { "Ref": "BasicInstanceProfile" },
        "Monitoring" : true,
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",

          "apt-get update\n",
          "apt-get -y install python-setuptools\n",
          "mkdir aws-cfn-bootstrap-latest\n",
          "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
          "easy_install aws-cfn-bootstrap-latest\n",

          "ln /aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/ \n",
          "chmod 700 /etc/init.d/cfn-hup  \n",
          "chown root:root /etc/init.d/cfn-hup \n",
          "update-rc.d cfn-hup defaults  \n",
          "update-rc.d cfn-hup enable  \n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /usr/local/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "InstanceWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Install it\n",
          "/usr/local/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r Instance ",
          "         --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "# Start up the cfn-hup daemon to listen for changes to the instance metadata\n",
          "/usr/local/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",

          "# All done so signal success\n",
          "/usr/local/bin/cfn-signal -e 0 -r \"Instance setup complete\" '", { "Ref" : "InstanceWaitHandle" }, "'\n"
          
        ]]}},
        "Tags": [
          {
            "Key": "Name",
            "Value": "CW : Custom Scripts :: Instance"
          }
        ]
      }
    },
    "InstanceWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "InstanceWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "Instance",
      "Properties" : {
        "Handle" : {"Ref" : "InstanceWaitHandle"},
        "Timeout" : "300"
      }
    }
  },
  "Outputs" : {
    "StepsToConnect" : {
      "Value" : { "Fn::Sub" : "ssh -i ${KeyName}.pem ubuntu@${Instance.PublicIp}" },
      "Description" : "Execute this to connect to your instance"
    }
  }
}